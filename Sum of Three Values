Sum of Three Values
CSES Sorting and Searching

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <cstdlib>
#include <cstdio>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 2e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = 1e9;
const ll MOD = 998244353;

void solve() {
    ll n, x;
    cin >> n >> x;
    
    ll a[n];
    map<ll, vector<ll>> rev; //Given a number, will return a list of all indices that have said number
    for (ll i = 0; i < n; i++) {
        cin >> a[i];
        rev[a[i]].push_back(i+1);
    }
    //Sort the array in order to use 2-pointers
    sort(a, a+n);
    
    if (n < 3) {
        cout << "IMPOSSIBLE" << endl;
        return;
    }
    
    //Pick one of the numbers and then run a standard 2SUM algorithm
    for (ll i = 0; i < n; i++) {
        vector<ll> b;
        for (ll j = 0; j < n; j++) {
            if (i == j) {
                continue;
            }
            b.push_back(a[j]);
        }
        
        ll l = 0, r = n-2;
        while (l < r) {
            if (a[i] + b[l] + b[r] > x) {
                r--;
            } else if (a[i] +  b[l] + b[r] < x) {
                l++;
            } else {
                //Print the locations of all the values
                cout << rev[a[i]].back() << " ";
                rev[a[i]].pop_back();
                cout << rev[b[l]].back() << " ";
                rev[b[l]].pop_back();
                cout << rev[b[r]].back() << endl;
                return;
            }
        }
    }
    
    cout << "IMPOSSIBLE" << endl;
}

int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("split.in", "r", stdin);
    freopen("split.out", "w", stdout);
    */
    
    ll t = 1;
    //cin >> t;
    
    while (t--) {
        solve();
    }
}

