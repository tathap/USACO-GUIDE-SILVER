USACO 2020 January Contest, Silver
Problem 3. Wormhole Sort

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 1e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (works(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

ll n, m;
ll p[MAXN];
vector<pair<ll, ll>> adj[MAXN];

vector<vector<ll>> comp;
vector<ll> temp;
bool visited[MAXN];

void dfs(ll node, ll power) {
    for (auto el: adj[node]) {
        if (!visited[el.first] && el.second >= power) {
            visited[el.first] = true;
            temp.push_back(el.first);
            dfs(el.first, power);
        }
    }
}

//Check if a certain power works
bool works(ll power) {
    comp.clear(); temp.clear();
    for (ll i = 0; i < n; i++) {
        visited[i] = false;
    }
    
    //Compute all the connected components using edges with width greater than or equal to power
    for (ll i = 0; i < n; i++) {
        if (!visited[i]) {
            visited[i] = true;
            temp.push_back(i);
            dfs(i, power);
            comp.push_back(temp);
            temp.clear();
        }
    }
    
    //Compare the set of positions in each component with the set of cows at those positions
    for (auto el: comp) {
        vector<ll> v;
        for (auto el2: el) {
            v.push_back(p[el2]);
        }
        
        vector<ll> v2 = el;
        sort(v.begin(), v.end());
        sort(v2.begin(), v2.end());
        
        if (v != v2) {
            return false;
        }
    }
    
    return true;
}

//Observation: We can construct a graph where the nodes are positions, and the wormholes are weighted vertices.
//We can binary search on the largest possible length of the minimum width of all wormholes used. In order to check if a certain k works, we will first store all the connected components of all the positions connected by wormholes with width >= k. For each component, if the set of cows located inside the component is the same set as the set of positions inside the component, then they will be able to swap themselves through the wormholes and arrive at their appropriate positions.

void solve(ll ca)
{
    cin >> n >> m;
    
    //Compute p. p[i] will store the initial cow located at position i
    for (ll i = 0; i < n; i++) {
        ll val; cin >> val; val--;
        p[val] = i;
    }
    
    //Create the graph
    for (ll i = 0; i < m; i++) {
        ll a, b, w;
        cin >> a >> b >> w;
        a--; b--;
        adj[a].push_back({b, w});
        adj[b].push_back({a, w});
    }
    
    //Binary search on the largest possible answer
    ll lo = 0; ll hi = 1e10;
    lo--;
    
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1) / 2;
        
        if (works(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    //In this case, the cows are already sorted. So print -1
    if (lo == 1e10) {
        cout << -1 << endl;
        return;
    }
    
    //Print the largest minimum width that works
    cout << lo << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    
    freopen("wormsort.in", "r", stdin);
    freopen("wormsort.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
