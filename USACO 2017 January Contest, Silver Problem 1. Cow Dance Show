USACO 2017 January Contest, Silver
Problem 1. Cow Dance Show

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <tuple>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <cstdlib>
#include <cstdio>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 2e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = 2e16;
const ll MOD = 998244353;

void solve() {
    ll n, t;
    cin >> n >> t;
    
    vector<ll> d(n);
    for (ll i = 0; i < n; i++) {
        cin >> d[i];
    }
    
    //Binary Search on the smallest value of k that works
    ll lo = 1, hi = n;
    hi++;
    while (lo < hi) {
        int mid = lo + (hi - lo) / 2;

        //The priority queue will give us the first cow that finishes (it sorts cows by finish time)
        priority_queue<ll> pq;
        
        //We'll add the first mid cows to the priority queue
        ll i;
        for (i = 0; i < mid; i++) {
            pq.push(-1*d[i]);
        }
        ll ans = 0;
        while (!pq.empty()) {
            ll cur = pq.top();
            pq.pop();
            
            //If we still have more cows to add, add the next cow's finish time
            if (i < n) {
                pq.push(-1*d[i] + cur);
                i++;
            } else {
                //Use this cow's finish time as a possible answer
                ans = max(ans, -1*cur);
            }
        }
        
        if (ans <= t) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    cout << lo << endl;
    return;
}


int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    
    freopen("cowdance.in", "r", stdin);
    freopen("cowdance.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;

    while (t--) {
        solve();
    }
}
