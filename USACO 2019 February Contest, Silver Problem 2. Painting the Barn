USACO 2019 February Contest, Silver
Problem 2. Painting the Barn

Code:
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
/*
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
*/
using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 2e6+5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9+7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}

ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll ___lcm(ll a, ll b) {
    ll prod = a*b;
    return (prod/__gcd(a, b));
}
 
ll ceil(ll a, ll b) {
    if (a == ZER) return a;
    return (a - ONE)/b + ONE;
}
 
ll fact[MAXN];
void precompute()
{
    fact[0] = 1;
    for (ll i = 1; i < MAXN; i++) {
        fact[i] = (i * fact[i - 1]) % MOD;
    }
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}

//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}
 
ll nCk(ll n, ll k) {
    return ((fact[n] * inv(fact[k]) % MOD) * inv(fact[n-k])) % MOD;
}

ll nPk(ll n, ll k) {
    return ((fact[n]%MOD * inv(fact[n-k]%MOD)%MOD)%MOD);
}

//Since the grid is 10^3 by 10^3, what we'll do is create a 2D ps array such that ps[i][j] stores the number of rectangles active in it. We can update this with 2D subgrid updates and then count the number of units with exactly k coats of paint at the end.
void solve()
{
    ll n, k;
    cin >> n >> k;
    
    ll ps[1001][1001];
    for (ll i = 0; i <= 1000; i++) {
        for (ll j = 0; j <= 1000; j++) {
            ps[i][j] = 0;
        }
    }
    
    while (n--) {
        ll x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        ps[x1][y1]++;
        ps[x2][y1]--;
        ps[x1][y2]--;
        ps[x2][y2]++;
    }
    
    for (ll i = 0; i <= 1000; i++) {
        for (ll j = 0; j <= 1000; j++) {
            if (i == 0 && j == 0) {
                continue;
            } else if (i == 0) {
                ps[i][j] += ps[i][j-1];
            } else if (j == 0) {
                ps[i][j] += ps[i-1][j];
            } else {
                ps[i][j] += (ps[i-1][j] + ps[i][j-1] - ps[i-1][j-1]);
            }
        }
    }
    
    ll ans = 0;
    for (ll i = 0; i <= 1000; i++) {
        for (ll j = 0; j <= 1000; j++) {
            if (ps[i][j] == k) {
                ans++;
            }
        }
    }
    
    cout << ans << endl;
    
    return;
}

int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    
    freopen("paintbarn.in", "r", stdin);
    freopen("paintbarn.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;
        
    while (t--) {
        solve();
    }
}

