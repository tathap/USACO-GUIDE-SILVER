USACO 2017 US Open Contest, Silver
Problem 1. Paired Up

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <cstdlib>
#include <cstdio>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 2e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = 1e9;
const ll MOD = 998244353;

//We will try to pair up larger and smaller cows. We will run 2 pointers.
void solve() {
    ll n;
    cin >> n;
    
    pair<ll, ll> cow[n]; //cow[i].first is its output, cow[i].second is the count
    for (ll i = 0; i < n; i++) {
        cin >> cow[i].second >> cow[i].first;
    }
    
    sort(cow, cow+n); //sort cows from smaller milking output to larger milking output
    
    ll l = 0, r = n-1; //The left pointer will point to the smallest milking output available while the right pointer will point to the largest milking output available
    
    ll ans = -1;
    while (l <= r) {
        ll take = min(cow[l].second, cow[r].second);
        
        //In the case where we are pairing cows from the same group, we need to divide the #of cows by 2 and pair them with eachother
        if (l == r) {
            take = cow[l].second/2;
        }
        
        //Take the maximum amount of cows from the cows with the smallest available output and from the cows with the largest available output and pair them
        cow[l].second-=take;
        cow[r].second-=take;
        
        if (take > 0) {
            ans = max(ans, cow[l].first + cow[r].first);
        }
        
        if (cow[l].second == 0) {
            l++;
        }
        if (cow[r].second == 0) {
            r--;
        }
    }
    
    cout << ans << endl;
}

int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    
    freopen("pairup.in", "r", stdin);
    freopen("pairup.out", "w", stdout);
    
    
    ll t = 1;
    //cin >> t;
    
    while (t--) {
        solve();
    }
}

