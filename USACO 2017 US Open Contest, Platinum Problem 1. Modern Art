USACO 2017 US Open Contest, Platinum
Problem 1. Modern Art

Code:
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
/*
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
*/
using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 2e6+5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9+7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}

ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll ___lcm(ll a, ll b) {
    ll prod = a*b;
    return (prod/__gcd(a, b));
}
 
ll ceil(ll a, ll b) {
    if (a == ZER) return a;
    return (a - ONE)/b + ONE;
}
 
ll fact[MAXN];
void precompute()
{
    fact[0] = 1;
    for (ll i = 1; i < MAXN; i++) {
        fact[i] = (i * fact[i - 1]) % MOD;
    }
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}

//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}
 
ll nCk(ll n, ll k) {
    return ((fact[n] * inv(fact[k]) % MOD) * inv(fact[n-k])) % MOD;
}

ll nPk(ll n, ll k) {
    return ((fact[n]%MOD * inv(fact[n-k]%MOD)%MOD)%MOD);
}


//All colors from 1 to n^2 which did not appear in the canvas could be the first color used, so our answer is at leas that.
//Then compute the bounding boxes for each of the existing colors. We'll create a 2D prefix sum array, where ps2[i][j] is the number of active bounding boxes at node ij. This can be computed with subarray range edits (2D prefix sum updates). If a node has 2 or more active bounding boxes, then its color couldn't have been the first one since it had to have been placed on top of someone else's bounding box. Once you go through all the n^2 elements, increase your answer by the number of colors that pass these checks. There is an edge case however: If all of the canvas is either 1 color or empty, and if n > 1, then that color couldn't have been first since it would have painted over other colors. It wouldn't have passed the earlier checks, so we need to treat this edge case seperately
struct BoundingBox{
    ll minx, maxx, miny, maxy;
};

void solve()
{
    ll n;
    cin >> n;
    
    ll canvas[n][n];
    set<ll> seen;
    
    BoundingBox bb[n*n + 5];
    for (ll i = 0; i <= n*n; i++) {
        bb[i].minx = INF; bb[i].maxx = -INF;
        bb[i].miny = INF; bb[i].maxy = -INF;
    }
    
    //Construct bounding boxes
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            cin >> canvas[i][j];
            if (canvas[i][j] != 0) {
                seen.insert(canvas[i][j]);
                bb[canvas[i][j]].minx = min(bb[canvas[i][j]].minx, i);
                bb[canvas[i][j]].maxx = max(bb[canvas[i][j]].maxx, i);
                bb[canvas[i][j]].miny = min(bb[canvas[i][j]].miny, j);
                bb[canvas[i][j]].maxy = max(bb[canvas[i][j]].maxy, j);
            }
        }
    }
    
    //All the colors that we haven't seen would have been painted over and could have been the first color
    ll ans = n*n - seen.size();
    
    ll ps2[n+1][n+1]; //ps2[i][j] counts the number of active bounding boxes at index i, j
    for (ll i = 0; i <= n; i++) {
        for (ll j = 0; j <= n; j++) {
            ps2[i][j] = 0;
        }
    }
    
    //For each bounding box, use 2D prefix sum updates to update the prefix sum array
    for (ll i = 0; i <= n*n; i++) {
        if (bb[i].minx == INF) {
            continue;
        }
        
        ps2[bb[i].minx][bb[i].miny]++;
        ps2[bb[i].maxx+1][bb[i].miny]--;
        ps2[bb[i].minx][bb[i].maxy+1]--;
        ps2[bb[i].maxx+1][bb[i].maxy+1]++;
    }

    //Compute the prefix sum matrix
    for (ll i = 0; i <= n; i++) {
        for (ll j = 0; j <= n; j++) {
            if (i == 0 && j == 0) {
                //
            } else if (i == 0) {
                ps2[i][j] += ps2[i][j-1];
            } else if (j == 0) {
                ps2[i][j] += ps2[i-1][j];
            } else {
                ps2[i][j] += (ps2[i-1][j] + ps2[i][j-1] - ps2[i-1][j-1]);
            }
        }
    }
    
    //Conduct all the checks
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            if (ps2[i][j] >= 2 && canvas[i][j] != 0) {
                if (seen.find(canvas[i][j]) == seen.end()) {
                    
                } else {
                    seen.erase(canvas[i][j]);
                }
            }
        }
    }
    
    
    //Edge Case: All elements are either 0 or a certain color, and n > 1
    set<ll> se;
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            se.insert(canvas[i][j]);
        }
    }
    
    if (se.size() == 1) {
        cout << n*n - 1 << endl;
        return;
    } else if (se.size() == 2 && se.find(0) != se.end()) {
        cout << n*n - 1 << endl;
        return;
    }
    
    //Print all the covered colors plus all the visible colors that passed the checks
    cout << ans + seen.size() << endl;
    
    return;
}

int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    freopen("art.in", "r", stdin);
    freopen("art.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;
        
    while (t--) {
        solve();
    }
}

