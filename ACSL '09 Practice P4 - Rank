ACSL '09 Practice P4 - Rank
ACSL Practice 2009

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 200;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (wo rks(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

ll n, k;
ll adj[MAXN][MAXN];
bool visited[MAXN];
bool works;

void dfs(ll node, ll orig) {
    if (works) {
        return;
    }
    for (ll i = 0; i < n; i++) {
        if (!visited[i] && adj[node][i] == 1) {
            visited[i] = true;
            dfs(i, orig);
        } else if (visited[i] && adj[node][i] == 1 && i == orig) {
            works = true;
            return;
        }
    }
    if (works) {
        return;
    }
}

//We will create a graph where adj[i][j] = 1 if player i can beat player j. Since the bounds are super low, we can start from each player and manually check if a cycle exists involving that player. If the bounds were bigger, then we could have used SCC's
void solve(ll ca)
{
    cin >> n >> k;
    
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            adj[i][j] = -1;
        }
    }
    
    for (ll i = 0; i < k; i++) {
        ll a; ll b; ll sa; ll sb;
        cin >> a >> b >> sa >> sb;
        
        if (sa > sb) {
            adj[a-1][b-1] = 1;
        } else {
            adj[b-1][a-1] = 1;
        }
    }

    ll ans = 0;
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            visited[j] = false;
        }
        visited[i] = true;
        works = false;
        dfs(i, i);
        
        if (works) {
            ans++;
        }
    }
    
    cout << ans << endl;

    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("fenceplan.in", "r", stdin);
    freopen("fenceplan.out", "w", stdout);
    */
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
