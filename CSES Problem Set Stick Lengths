CSES Problem Set
Stick Lengths

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <tuple>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <cstdlib>
#include <cstdio>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 2e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = 1e9;
const ll MOD = 998244353;

//The Optimal solution is to use the median as the same length. This is bc the problem is just asking us to find some x that minimizes the expression |a_1 - x| + |a_2 - x| + . . . + |a_n - x|. This is a standard problem and the solution is to let x be the median.
void solve() {
    ll n;
    cin >> n;
    
    ll p[n];
    for (ll i = 0; i < n; i++) {
        cin >> p[i];
    }
    sort(p, p+n);
    
    ll med = p[n/2];
    ll ans = 0;
    
    for (ll i = 0; i < n; i++) {
        ans += abs(med - p[i]);
    }
    
    cout << ans << endl;
 
    return;
}


int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("convention2.in", "r", stdin);
    freopen("convention2.out", "w", stdout);
    */
    
    ll t = 1;
    //cin >> t;
    
    while (t--) {
        solve();
    }
}
