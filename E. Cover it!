E. Cover it!
Codeforces Round #565 (Div. 3)

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 5e5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
//const ll MOD = 998244353;
ll MOD;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (works(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

ll n, m;
vector<ll> adj[MAXN];
ll mark[MAXN];

void dfs(ll node, ll col) {
    for (auto el: adj[node]) {
        if (mark[el] == -1) {
            mark[el] = 1 - col;
            dfs(el, 1 - col);
        }
    }
}

//Since each unchoosed node will need to have an edge with at least 1 chosen node, it's optimal to keep the chosen nodes spread out across the graph.
//The reason why its optimal to spread the chosen nodes across the graph is because if 2 chosen nodes are connected by an edge, you've essentially wasted space that could have been given to an unchosen node (we have to prioritize unchosen nodes bc the main constraint of the problem relates to them).
//What we can do is a semi-bipartite strategy. Try coloring the graph as you would that of a bipartite graph. It's not guaranteed to be a bipartite graph, so you'll prolly have contradictions. However, this will spread out the nodes as much across the graph as possible.
//Since the 2 components are spread out as far as possible and were computed with bipartite coloring, they will provide the optimal solution to satsify the problem. Print the nodes of the color with fewer total nodes

void solve(ll ca)
{
    cin >> n >> m;
    for (ll i = 0; i < n; i++) {
        adj[i].clear();
        mark[i] = -1;
    }
    for (ll i = 0; i < m; i++) {
        ll u, v;
        cin >> u >> v;
        adj[u-1].push_back(v-1);
        adj[v-1].push_back(u-1);
    }
    
    mark[0] = 0;
    dfs(0, 0);
    
    ll c1 = 0; ll c2 = 0;
    for (ll i = 0; i < n; i++) {
        if (mark[i] == 0) {
            c1++;
        } else {
            c2++;
        }
    }
    
    if (c1 < c2) {
        cout << c1 << endl;
        for (ll i = 0; i < n; i++) {
            if (mark[i] == 0) {
                cout << i+1 << " ";
            }
        }
        cout << endl;
    } else {
        cout << c2 << endl;
        for (ll i = 0; i < n; i++) {
            if (mark[i] == 1) {
                cout << i+1 << " ";
            }
        }
        cout << endl;
    }
    
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("revegetate.in", "r", stdin);
    freopen("revegetate.out", "w", stdout);
    */
    
    ll t = 1;
    cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
