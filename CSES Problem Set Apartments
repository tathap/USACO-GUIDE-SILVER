CSES Problem Set
Apartments

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <tuple>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <cstdlib>
#include <cstdio>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 2e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = 1e9;
const ll MOD = 998244353;

//Sort the applicants and the apartments. Then use 2-pointers. If the curent applicant and current apartment work, then use them. Otherwise if the current applicant is greater than the current apartment, we'll need to move on to the next apartment. If the current applicant is smaller than the current apartment, we'll need to move on to the next applicant.
void solve() {
    ll n, m, k;
    cin >> n >> m >> k;
    
    ll a[n]; for (ll i = 0; i < n; i++) cin >> a[i];
    ll b[m]; for (ll i = 0; i < m; i++) cin >> b[i];
    
    sort(a, a+n); sort(b, b+m);
    
    ll i = 0; ll j = 0;
    
    ll ans = 0;
    while (i < n && j < m) {
        if (abs(a[i] - b[j]) <= k) {
            i++; j++; ans++;
        } else {
            if (a[i] < b[j]) {
                i++;
            } else {
                j++;
            }
        }
    }
    
    cout << ans << endl;
    
    return;
}


int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("convention2.in", "r", stdin);
    freopen("convention2.out", "w", stdout);
    */
    
    ll t = 1;
    //cin >> t;
    
    while (t--) {
        solve();
    }
}
