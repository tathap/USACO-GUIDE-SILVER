USACO 2020 December Contest, Silver
Problem 2. Rectangular Pasture

Code:
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
/*
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
*/
using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 2e6+5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9+7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}

ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll ___lcm(ll a, ll b) {
    ll prod = a*b;
    return (prod/__gcd(a, b));
}
 
ll ceil(ll a, ll b) {
    if (a == ZER) return a;
    return (a - ONE)/b + ONE;
}
 
ll fact[MAXN];
void precompute()
{
    fact[0] = 1;
    for (ll i = 1; i < MAXN; i++) {
        fact[i] = (i * fact[i - 1]) % MOD;
    }
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}

//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}
 
ll nCk(ll n, ll k) {
    return ((fact[n] * inv(fact[k]) % MOD) * inv(fact[n-k])) % MOD;
}

ll nPk(ll n, ll k) {
    return ((fact[n]%MOD * inv(fact[n-k]%MOD)%MOD)%MOD);
}

//First compress all the coordinates. This can be done very easily since all x and y coordinates are distinct. Then create a 2D prefix sum array, where ps[i][j] counts the # of cows up to i, j. Now there is an O(N^2) algorithm. Sort the coordinates by row. Iterate over the top and bottom row that defines a unique rectangle. Note that these 2 can be the same. Then use 2D prefix sums to compute the number of cows that will define the left-side, the number of cows that will define the right-side, multiply these 2 quantities, and add this to our answer. Don't forget to increase the answer by 1 to account for the empty subset. This algorithm works because every subset is uniquely defined by the topmost, bottommost, leftmost, and rightmost cow(s) (Some of these positions may be occupied by the same cow).
void solve()
{
    ll n;
    cin >> n;
    
    //Compress the coordinates
    pair<ll, ll> coord[n];
    vector<ll> v1, v2;
    for (ll i = 0; i < n; i++) {
        cin >> coord[i].first >> coord[i].second;
        v1.push_back(coord[i].first);
        v2.push_back(coord[i].second);
    }
    sort(v1.begin(), v1.end());
    sort(v2.begin(), v2.end());
    
    map<ll, ll> compress1, compress2;
    ll c = 1;
    for (ll i = 0; i < v1.size(); i++) {
        compress1[v1[i]] = c;
        c++;
    }
    c = 1;
    for (ll i = 0; i < v2.size(); i++) {
        compress2[v2[i]] = c;
        c++;
    }
    
    for (ll i = 0; i < n; i++) {
        coord[i].first = compress1[coord[i].first];
        coord[i].second = compress2[coord[i].second];
    }
    
    //Create the prefix sum array
    ll ps[n+1][n+1];
    for (ll i = 0; i <= n; i++) {
        for (ll j = 0; j <= n; j++) {
            ps[i][j] = 0;
        }
    }
    
    for (ll i = 0; i < n; i++) {
        ps[coord[i].first][coord[i].second]++;
    }
    
    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= n; j++) {
            ps[i][j] += (ps[i-1][j] + ps[i][j-1] - ps[i-1][j-1]);
        }
    }
    
    //Sort the coordinates by rows
    sort(coord, coord+n);
    
    ll ans = 1; //Answer starts off as 1 to account for the empty subset
    for (ll r1 = 0; r1 < n; r1++) {
        for (ll r2 = r1; r2 < n; r2++) {
            //After iterating over the top and bottom row, compute the left and right columns, and then compute the # of left and right cows that could define a subset.
            ll leftcol = min(coord[r1].second, coord[r2].second);
            ll rightcol = max(coord[r1].second, coord[r2].second);
            ll numleft = ps[coord[r2].first][leftcol] - ps[coord[r1].first-1][leftcol]; //# of cows in between the 2 rows inclusive that are to the left of the left column inclusive
            ll numright = ps[coord[r2].first][n] - ps[coord[r2].first][rightcol-1] - ps[coord[r1].first-1][n] + ps[coord[r1].first-1][rightcol-1]; //# of cows in between the 2 rows inclusive that are to the right of the right column inclusive.
            ans += (numleft * numright);
            //Increase the answer by their product
        }
    }
    
    cout << ans << endl;
    
    return;
}

int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("lazy.in", "r", stdin);
    freopen("lazy.out", "w", stdout);
    */
    
    ll t = 1;
    //cin >> t;
        
    while (t--) {
        solve();
    }
}

