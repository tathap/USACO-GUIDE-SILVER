USACO 2016 January Contest, Silver
Problem 3. Build Gates

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 300;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (works(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */


//Size of the grid. I checked tons of different sizes and this worked the best
const ll MAXVA = 3000;
ll grid[MAXVA][MAXVA]; //All values initialized to 0


//Idea: If we create a graph where the fences are walls, then the answer is just the #of connected components - 1. In order to create the graph, we'll give each unit a length of 2. For example, if we are going North, we'll mark 2 units as fences as we go up. This will allow us to scale up the fence described in the problem statement while still having a graph to work with

void solve(ll ca)
{
    ll n;
    cin >> n;
    ll cr = MAXVA/2; ll cc = MAXVA/2; //start at the middle of the graph
    
    string s; cin >> s;
    
    for (ll i = 0; i < n; i++) {
        //Given the current command, we'll set 2 nodes in the appropriate direction to 1 to represent fences
        grid[cr][cc] = 1;
        
        if (s[i] == 'N') {
            grid[cr-1][cc] = 1;
            cr-=2;
        } else if (s[i] == 'S') {
            grid[cr+1][cc] = 1;
            cr+=2;
        } else if (s[i] == 'W') {
            grid[cr][cc-1] = 1;
            cc-=2;
        } else {
            grid[cr][cc+1] = 1;
            cc+=2;
        }
    }
        
    ll dr[4] = {0, 1, 0, -1};
    ll dc[4] = {1, 0, -1, 0};
    
    //Compute the #of connected components. We used iterative dfs b/c recursive dfs used too much memory
    ll ans = 0;
    for (ll i = 0; i < MAXVA; i++) {
        for (ll j = 0; j < MAXVA; j++) {
            if (grid[i][j] == 0) {
                ans++;
                
                grid[i][j] = 1;
                
                stack<pair<ll, ll>> sa;
                sa.push({i, j});
                while (!sa.empty()) {
                    pair<ll, ll> cur = sa.top();
                    sa.pop();
                    
                    for (ll k = 0; k < 4; k++) {
                        ll nr = cur.first + dr[k];
                        ll nc = cur.second + dc[k];
                        if (nr >= 0 && nr < MAXVA && nc >= 0 && nc < MAXVA) {
                            if (grid[nr][nc] == 0) {
                                grid[nr][nc] = 1;
                                sa.push({nr, nc});
                            }
                        }
                    }
                }
            }
        }
    }
    
    cout << ans-1 << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    freopen("gates.in", "r", stdin);
    freopen("gates.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//listen to mall song
