Birthday Party
Kattis

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 200;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (wo rks(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

ll p, c;
ll adj[MAXN][MAXN];
bool visited[MAXN];

void dfs(ll node) {
    for (ll k = 0; k < p; k++) {
        if (!visited[k] && adj[node][k] == 1) {
            visited[k] = true;
            dfs(k);
        }
    }
}

//We will simulate the removal of each edge and check if the graph remains connected

void solve(ll ca)
{
    cin >> p >> c;
    
    if (p == 0 && c == 0) {
        return;
    }
    
    for (ll i = 0; i < p; i++) {
        for (ll j = 0; j < p; j++) {
            adj[i][j] = -1;
        }
    }
    
    for (ll i = 0; i < c; i++) {
        ll a; ll b;
        cin >> a >> b;
        adj[a][b] = 1;
        adj[b][a] = 1;
    }
    
    bool ans = false;
    for (ll i = 0; i < p; i++) {
        for (ll j = 0; j < p; j++) {
            if (adj[i][j] == -1) {
                continue;
            }
            
            adj[i][j] = -1;
            adj[j][i] = -1;
            for (ll k = 0; k < p; k++) {
                visited[k] = false;
            }
            
            visited[0] = true;
            dfs(0);
            
            bool works = false;
            for (ll k = 0; k < p; k++) {
                if (!visited[k]) {
                    works = true;
                    break;
                }
            }
            
            if (works) {
                ans = true;
                break;
            }
            
            adj[i][j] = 1;
            adj[j][i] = 1;
        }
        
        
        if (ans) {
            break;
        }
    }
    
    if (ans) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }
    
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("fenceplan.in", "r", stdin);
    freopen("fenceplan.out", "w", stdout);
    */
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (!cin.eof()) {
        solve(co);
        ++co;
    }
}
