E. Correct Placement
Codeforces Round #693 (Div. 3)

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <cstdlib>
#include <cstdio>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 2e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = 1e9;
const ll MOD = 998244353;

//Compress the heights and widths of all the values. Then create 2 arrays, a height array and a width array. The height array's indices will be all the unique height values, and a similar arrangement occurrs in the width array. Then compute prefix mins on both arrays. The prefix min on the height array will store the smallest width of the first i heights, while the prefix min on the width array will store the smallest height of the first i weights. Once you've used this information to find a suitable height, weight combo, use binary search on the original array to find its index and print it.

void solve() {
    ll n;
    cin >> n;
    
    //stores the original order of the friends and their measurements
    pair<ll, ll> friends[n];
    map<pair<ll, ll>, ll> rev; //Given a {height, width} pair, rev will return its original index in friends
    
    //Get all the unqiue integers across all widths and heights and then compress friends and compute rev
    set<ll> s;
    for (ll i = 0; i < n; i++) {
        cin >> friends[i].first >> friends[i].second;
        s.insert(friends[i].first);
        s.insert(friends[i].second);
    }
    vector<ll> v; map<ll, ll> me;
    for (auto el: s) {
        v.push_back(el);
    }
    sort(v.begin(), v.end());
    ll c = 1;
    for (ll i = 0; i < v.size(); i++) {
        me[v[i]] = c;
        c++;
    }
    for (ll i = 0; i < n; i++) {
        friends[i].first = me[friends[i].first];
        friends[i].second = me[friends[i].second];
        rev[{friends[i].first, friends[i].second}] = i;
    }
    
    vector<ll> height(2*n+1, INF); //height[i] stores the smallest width at that height
    vector<ll> width(2*n+1, INF); //width[i] stores the smallest heigth at that width
    
    //Compute the 2 arrays using the modified friends array
    for (ll i = 0; i < n; i++) {
        height[friends[i].first] = min(height[friends[i].first], friends[i].second);
        width[friends[i].second] = min(width[friends[i].second], friends[i].first);
    }
    
    //ps1[i].second stores the smallest width of the first i heights, and ps1[i].first stores its complementary height
    //ps2[i].second stores the smallest height of the first i widths, and ps2[i].first stores its complementary width
    pair<ll, ll> ps1[2*n+1]; pair<ll, ll> ps2[2*n+1];
    ps1[0] = {-1, INF}; ps2[0] = {-1, INF};
    
    //Compute ps1 and ps2
    for (ll i = 1; i <= 2*n; i++) {
        if (height[i] < ps1[i-1].second) {
            ps1[i] = {i, height[i]};
        } else {
            ps1[i] = ps1[i-1];
        }
        
        if (width[i] < ps2[i-1].second) {
            ps2[i] = {i, width[i]};
        } else {
            ps2[i] = ps2[i-1];
        }
    }

    //Compute the answer for each of the n friends
    for (ll i = 0; i < n; i++) {
        //If the smallest possible width of all the smaller heights is smaller than the current width, then use the index of this pair as your answer
        if (ps1[friends[i].first-1].second < friends[i].second) {
            pair<ll, ll> goal = {ps1[friends[i].first-1].first, ps1[friends[i].first-1].second};
            cout << rev[goal] + 1 << " ";
        } else if (ps2[friends[i].first-1].second < friends[i].second) { //If the smallest possible height of all the widths (smaller than your current height) is smaller than your current width, then use the index of this pair as your answer
            pair<ll, ll> goal = {ps2[friends[i].first-1].second, ps2[friends[i].first-1].first};
            cout << rev[goal] + 1 << " ";
        } else {
            cout << -1 << " ";
        }
    }
    
    cout << endl;
}

int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("split.in", "r", stdin);
    freopen("split.out", "w", stdout);
    */
    
    ll t = 1;
    cin >> t;
    
    while (t--) {
        solve();
    }
}

