USACO 2015 December Contest, Silver
Problem 1. Switching on the Lights

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 200;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (works(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

ll n, m;
vector<pair<ll, ll>> lights[MAXN][MAXN]; //lights[i][j] stores a list of rooms that room[i][j] can directly switch the light on for.
//visited[i][j] is true if room[i][j] has been visited.
//lighted[i][j] is true if room[i][j] has been lighted
bool visited[MAXN][MAXN]; bool lighted[MAXN][MAXN];

ll dr[4] = {0, 1, 0, -1};
ll dc[4] = {1, 0, -1, 0};

void dfs(ll r, ll c) {
    //Iterate over all the rooms that we can light from the current node
    for (auto el: lights[r][c]) {
        if (visited[el.first][el.second]) {
            continue;
        }
        
        //turn the light in the new room on
        lighted[el.first][el.second] = true;
        
        //If we find a room next to this new room that has already been visited, then we can teleport directly to this newly lightened room
        bool found = false;
        for (ll k = 0; k < 4; k++) {
            ll pr = el.first + dr[k];
            ll pc = el.second + dc[k];
            if (pr >= 0 && pr < n && pc >= 0 && pc < n) {
                if (visited[pr][pc]) {
                    found = true;
                    break;
                }
            }
        }
        
        if (found) {
            visited[el.first][el.second] = true;
            dfs(el.first, el.second);
        }
    }
    
    //Check all the neighbours of the node and see if we can move there
    for (ll k = 0; k < 4; k++) {
        ll nr = r + dr[k];
        ll nc = c + dc[k];
        if (nr >= 0 && nr < n && nc >= 0 && nc < n) {
            if (!visited[nr][nc] && lighted[nr][nc]) {
                visited[nr][nc] = true;
                dfs(nr, nc);
            }
        }
    }
}

//Algorithm: What we'll do is we'll run a dfs starting from the top left room. At the current room, we'll on as many lights as possible. If any of these newly lighted rooms are next to a room that has already been visited, then we can "teleport" there. Once we're done with that, we'll check the intermediate neighbours of our current node and travel there if it has been lighted and hasn't been visited yet.

void solve(ll ca)
{
    cin >> n >> m;
    for (ll i = 0; i < m; i++) {
        ll x, y, a, b;
        cin >> x >> y >> a >> b;
        x--; y--; a--; b--;
        lights[x][y].push_back({a, b});
    }
    
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            visited[i][j] = false;
            lighted[i][j] = false;
        }
    }
    
    visited[0][0] = true;
    lighted[0][0] = true;
    dfs(0, 0);
    
    //Compute the number of rooms who have been lightened
    ll ans = 0;
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            if (lighted[i][j]) {
                ans++;
            }
        }
    }
    
    cout << ans << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    freopen("lightson.in", "r", stdin);
    freopen("lightson.out", "w", stdout);
    
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//listen to mall song
