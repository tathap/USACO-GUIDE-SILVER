USACO 2018 December Contest, Silver
Problem 3. Mooyo Mooyo

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 105;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (works(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

ll n, k;
char grid[101][11];
char tgrid[101][11];

bool visited[101][11];

vector<vector<pair<ll, ll>>> comp;
vector<pair<ll, ll>> temp;

ll dr[4] = {0, 1, 0, -1};
ll dc[4] = {1, 0, -1, 0};

//Run dfs to get connected components
void dfs(ll r, ll c) {
    if (visited[r][c]) {
        return;
    }
    
    visited[r][c] = true;
    temp.push_back({r, c});
    
    for (ll i = 0; i < 4; i++) {
        ll nr = r + dr[i];
        ll nc = c + dc[i];
        if (nr >= 0 && nr < n && nc >= 0 && nc < 10) {
            if (grid[nr][nc] == grid[r][c]) {
                dfs(nr, nc);
            }
        }
    }
}

//We will simulate the game. At each turn, we will compute all the connected components of haybales, remove them, and update the grid
void solve(ll ca)
{
    cin >> n >> k;
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < 10; j++) {
            cin >> grid[i][j];
        }
    }
    
    while (true) {
        comp.clear();
        
        //Reset visited
        for (ll i = 0; i < n; i++) {
            for (ll j = 0; j < 10; j++) {
                visited[i][j] = false;
            }
        }
        
        //Compute all the components of haybales
        for (ll i = 0; i < n; i++) {
            for (ll j = 0; j < 10; j++) {
                if (grid[i][j] != '0' && !visited[i][j]) {
                    temp.clear();
                    dfs(i, j);
                    comp.push_back(temp);
                }
            }
        }
         
        ll cnt = 0; //# of components of haybales we can actually remove
        for (auto el: comp) {
            if (el.size() < k) {
                continue;
            }
            cnt++;
            //Update each cell and mark it as '0' to show that it's been destroyed
            for (auto el2: el) {
                grid[el2.first][el2.second] = '0';
            }
        }
        
        //If no components could be destroyed, the game has ended
        if (cnt == 0) {
            break;
        }
        
        //We will create a new grid called tgrid and simulate the gravity falling for each column.
        for (ll col = 0; col < 10; col++) {
            ll ar = n-1; //This will be the current row in tgrid.
            
            //Iterate through all the rows of the current grid, and simulate their falling onto tgrid.
            for (ll ro = n-1; ro >= 0; ro--) {
                if (grid[ro][col] == '0') {
                    continue;
                }
                tgrid[ar][col] = grid[ro][col];
                ar--;
            }
            
            //Fill all the extra rows in the current column with '0' since they will be empty
            for (ll ro = ar; ro >= 0; ro--) {
                tgrid[ro][col] = '0';
            }
        }
        
        //Replace grid with tgrid
        for (ll i = 0; i < n; i++) {
            for (ll j = 0; j < 10; j++) {
                grid[i][j] = tgrid[i][j];
            }
        }
    }
    
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < 10; j++) {
            cout << grid[i][j];
        }
        cout << endl;
    }
    
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    
    freopen("mooyomooyo.in", "r", stdin);
    freopen("mooyomooyo.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//listen to mall song
