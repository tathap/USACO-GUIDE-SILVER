B. Preparing for Merge Sort
2017-2018 ACM-ICPC, NEERC, Southern Subregional Contest, qualification stage (Online Mirror, ACM-ICPC Rules, Teams Preferred)

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 5e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (wo rks(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

//Algorithm: We are going to maintain our increasing sequences. Iterate from left to right. At a[i], we want to find the first sequence such that it's highest value is less than a[i] and we will add a[i] there since that sequence would come first chronologically. If all the top values for each sequence are larger than a[i], we will have to create a new increasing sequence
void solve(ll ca)
{
    ll n; cin >> n;
    vector<ll> a(n);
    for (ll i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    vector<vector<ll>> ret; //stores all our increasing sequences
    vector<ll> top; //stores the highest-value/right-most element for its corresponding increasing sequence
    
    for (ll i = 0; i < n; i++) {
        //If i = 0, we have to create our first increasing sequence
        if (i == 0) {
            vector<ll> tem; tem.push_back(a[i]);
            ret.push_back(tem);
            top.push_back(a[i]);
        } else {
            //Notice that the vector top is decreasing. Therefore, we want to binary search on the first index such that top[i] < a[i]
            ll lo = 0; ll hi = top.size()-1;
            hi++;
            while (lo < hi) {
                ll mid = lo + (hi - lo) / 2;
                
                if (top[mid] < a[i]) {
                    hi = mid;
                } else {
                    lo = mid+1;
                }
            }
            
            //If no value is found, create a new increasing sequence
            if (lo == top.size()) {
                vector<ll> tem; tem.push_back(a[i]);
                ret.push_back(tem);
                top.push_back(a[i]);
            } else { //Otherwise, append a[i] to the appropriate increasing sequence
                top[lo] = a[i];
                ret[lo].push_back(a[i]);
            }
        }
    }
    
    for (auto el: ret) {
        for (auto el2: el) {
            cout << el2 << " ";
        }
        cout << endl;
    }
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("sabotage.in", "r", stdin);
    freopen("sabotage.out", "w", stdout);
    */
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
