USACO 2017 US Open Contest, Silver
Problem 3. Where's Bessie?

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 105;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (works(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

//INPUT
ll n;
char grid[21][21];
bool visited[21][21];

//Bounds of current subgrid we are checking
ll i, j, k, l;

ll dr[4] = {0, 1, 0, -1};
ll dc[4] = {1, 0, -1, 0};

void dfs(ll row, ll col) {
    for (ll a = 0; a < 4; a++) {
        ll nr = row + dr[a];
        ll nc = col + dc[a];
        if (nr >= i && nr <= k && nc >= j && nc <= l) {
            if (grid[row][col] == grid[nr][nc] && !visited[nr][nc]) {
                visited[nr][nc] = true;
                dfs(nr, nc);
            }
        }
    }
}

//Algorithm: For each of the n^4 possible rectangles, we will check if it satisfies the constraints regarding connected components in O(n^2) times for a total runtime of O(n^6)
//Algorithm: Once we have all the possible rectangles, we need to make sure that none of the rectangles in our list are enclosed by other rectangles in the same list. So we'll iterate over all pairs of these rectangles and remove the ones that are completely inside other rectangles. We can iterate over all pairs bc the #of rectangles that satisfy the constraint regarding connected components will actually be quite small

void solve(ll ca)
{
    //Read in the input
    cin >> n;
    for (ll a = 0; a < n; a++) {
        for (ll b = 0; b < n; b++) {
            cin >> grid[a][b];
        }
    }
    
    vector<pair<pair<ll, ll>, pair<ll, ll>>> ve; //Will store a list of all the rectangles that satisfy the constraint regarding connected components
    //ve[i].first.first will store the smaller row coordinate, .first.second will store the smaller col coordinate, .second.first will store the larger row coordinate, .second.second will store the larger col coordinate
    
    
    //Iterate over all rectangles
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            for (k = i; k < n; k++) {
                for (l = j; l < n; l++) {
                    //Reset visited
                    for (ll a = i; a <= k; a++) {
                        for (ll b = j; b <= l; b++) {
                            visited[a][b] = false;
                        }
                    }
                    //freq[i] will store the #of connected components involving characters of type i in the current subgrid
                    ll freq[26];
                    for (ll a = 0; a < 26; a++) {
                        freq[a] = 0;
                    }
                    
                    //Get the connected components in the current subgrid and update freq
                    for (ll a = i; a <= k; a++) {
                        for (ll b = j; b <= l; b++) {
                            if (!visited[a][b]) {
                                visited[a][b] = true;
                                ll dig = grid[a][b] - 'A';
                                freq[dig]++;
                                dfs(a, b);
                            }
                        }
                    }
                    
                    //If the character with the most components has more than 2 components, if the character with the next most components has exactly 1, and if no other characters appear, than this subgrid is a valid rectangle
                    sort(freq, freq+26);
                    if (freq[25] >= 2 && freq[24] == 1 && freq[23] == 0) {
                        ve.push_back({{i, j}, {k, l}});
                    }
                }
            }
        }
    }
    
    //removed[i] will tell us if the ith rectangle has been removed
    vector<bool> removed(ve.size(), false);
    
    while (true) {
        //#of rectangles we removed at the current iteration
        ll am = 0;
        for (ll a = 0; a < ve.size(); a++) {
            if (removed[a]) {
                continue;
            }
            for (ll b = a+1; b < ve.size(); b++) {
                if (removed[b]) {
                    continue;
                }
                
                //If the bth rectangle is completely inside the ath rectangle, remove it. Otherwise if the ath rectangle is completely inside the bth rectangle remove it. Otherwise, we can keep both
                if (ve[a].first.first <= ve[b].first.first && ve[a].first.second <= ve[b].first.second && ve[a].second.first >= ve[b].second.first && ve[a].second.second >= ve[b].second.second) {
                    removed[b] = true;
                    am++;
                } else if (ve[b].first.first <= ve[a].first.first && ve[b].first.second <= ve[a].first.second && ve[b].second.first >= ve[a].second.first && ve[b].second.second >= ve[a].second.second) {
                    removed[a] = true;
                    am++;
                }
            }
        }
        
        //If we didn't remove any rectangles, it will be impossible to remove any more so exit
        if (am == 0) {
            break;
        }
    }
    
    //Print the #of rectangles that weren't removed
    ll ans = 0;
    for (ll i = 0; i < removed.size(); i++) {
        if (!removed[i]) {
            ans++;
        }
    }
    
    cout << ans << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    
    freopen("where.in", "r", stdin);
    freopen("where.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//listen to mall song
