USACO 2016 December Contest, Gold
Problem 1. Moocast

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 1e3 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (wo rks(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

ll n;
ll adj[MAXN][MAXN];
bool visited[MAXN];

void dfs(ll node, ll power) {
    for (ll i = 0; i < n; i++) {
        if (!visited[i] && adj[node][i] <= power) {
            visited[i] = true;
            dfs(i, power);
        }
    }
}

bool works(ll k) {
    for (ll i = 0; i < n; i++) {
        visited[i] = false;
    }
    visited[0] = true;
    dfs(0, k);
    
    bool ok = true;
    for (ll i = 0; i < n; i++) {
        if (!visited[i]) {
            ok = false;
            break;
        }
    }
    
    return ok;
}

//Precompute the distances between every pair of cows. Then binary search on the smallest value of X. In order to check if a certain value k can work as X, we need to check if the graph is a connected component using only edges of length less than or equal to k

void solve(ll ca)
{
    cin >> n;
    
    pair<ll, ll> cows[n];
    for (ll i = 0; i < n; i++) {
        cin >> cows[i].first >> cows[i].second;
    }
    
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            adj[i][j] = ((cows[i].first - cows[j].first) * (cows[i].first - cows[j].first)) + ((cows[i].second - cows[j].second) * (cows[i].second - cows[j].second));
        }
    }
    
    ll lo = 0; ll hi = 1e10;
    hi++;
    
    while (lo < hi) {
        ll mid = lo + (hi - lo) / 2;
        
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    cout << lo << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    freopen("moocast.in", "r", stdin);
    freopen("moocast.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
